import pandas as pd 
import itertools
from itertools import product


# df=pd.read_excel('/content/test1.xlsx')

df = pd.read_excel("C:/Users/Erica Konadu/Desktop/test1.xlsx")
df

# # df['fat']
# # df['colour']
# # df['ph ']
print (list(product(df['fat'], df['ph '])))




import pandas as pd
import numpy as np
import itertools 
from itertools import permutations
from itertools import product
from sklearn.ensemble import RandomForestRegressor


df=pd.read_excel('cake corrections.xlsx')
df.head()
fat =df.drop(columns = ['Cake PH', 'Cake Colour'], axis =1)
colour = data.drop(columns = ['Cake PH', 'Cake Fat'], axis =1)
ph= df.drop(columns = ['Cake Colour', 'Cake Fat'], axis =1)
ph
fat
colour




# for i in range ('Cake Fat')


# numbers = [1, 3, 3]
combinations = []
for r in range(len(data)+1):
    for combination in itertools.combinations(set(data), r):
        combinations.append(combination)
print(combinations)


df1 =pd.DataFrame((list(product(df['Cake Fat'], df['Cake Colour'], df['Cake PH']))))
df2 = df1.dropna()
df2
input()




#this worked

uniques = [df[i].unique().tolist() for i in df.columns ]
df1=pd.DataFrame(product(*uniques), columns = df.columns)
df1
#all possible combinations of the dataframe
df2=df1.dropna() #drop N/A combinations
df2.tail(100)
df2.to_csv('Cake_combinations.csv')
df3=df2.to_numpy()
df3
##### input('fat:')
# input('ph:')
# input('colour:')

fat,ph,colour = input('fat:'), input('ph:'), input('colour:')
fat,ph,colour=[float(fat),float(ph),float(colour)]
answer= fat,ph,colour
# answer=list(fat,ph,colour)
print(answer)
answer in df3






#check whether input is in fat values
#in df['fat'].values
#or
#in list(df['fat'])


answer1 = input()
answer = float(answer1)
if answer in df['fat'].values :
    print ('TRUE')
else :
    print('FALSE')

#CALCULATION FOR CORRECTION
# bad_spec Bs
# total_volume Tv
# good_spec Gs
# volume good spec Vgs
# volume bad spec Vbs
#volume of corrected spec Vcs


Bs= 13
Vbs = 4
Gs = 10.5
Vgs = 1
Tv = Vbs + Vgs
Vcs = ((Bs*Vbs)+(Gs*Vgs))/Tv
